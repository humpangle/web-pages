<table>
  <thead>
    <tr>
      <th>Shortcut</th>
      <th>Expanded</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>statelessW</code></td>
      <td>Stateless Widget</td>
      <td>Creates a Stateless widget</td>
    </tr>
    <tr>
      <td><code>statefulW</code></td>
      <td>Stateful Widget</td>
      <td>Creates a Stateful widget</td>
    </tr>
    <tr>
      <td><code>build</code></td>
      <td>Build Method</td>
      <td>
        Describes the part of the user interface represented by the widget.
      </td>
    </tr>
    <tr>
      <td><code>initS</code></td>
      <td>InitState</td>
      <td>
        Called when this object is inserted into the tree. The framework will
        call this method exactly once for each State object it creates.
      </td>
    </tr>
    <tr>
      <td><code>dis</code></td>
      <td>Dispose</td>
      <td>
        Called when this object is removed from the tree permanently. The
        framework calls this method when this State object will never build
        again.
      </td>
    </tr>
    <tr>
      <td><code>reassemble</code></td>
      <td>Reassemble</td>
      <td>
        Called whenever the application is reassembled during debugging, for
        example during hot reload.
      </td>
    </tr>
    <tr>
      <td><code>didChangeD</code></td>
      <td>didChangeDependencies</td>
      <td>Called when a dependency of this State object changes</td>
    </tr>
    <tr>
      <td><code>didUpdateW</code></td>
      <td>didUpdateWidget</td>
      <td>Called whenever the widget configuration changes.</td>
    </tr>
    <tr>
      <td><code>customClipper</code></td>
      <td>Custom Clipper</td>
      <td>Used for creating custom shapes</td>
    </tr>
    <tr>
      <td><code>customPainter</code></td>
      <td>Custom Painter</td>
      <td>Used for creating custom paint</td>
    </tr>
    <tr>
      <td><code>listViewB</code></td>
      <td>ListView.Builder</td>
      <td>
        Creates a scrollable, linear array of widgets that are created on
        demand.Providing a non-null <code>itemCount</code> improves the ability
        of the <code>ListView</code> to estimate the maximum scroll extent.
      </td>
    </tr>
    <tr>
      <td><code>listViewS</code></td>
      <td>ListView.Separated</td>
      <td>
        Creates a fixed-length scrollable linear array of list 'items' separated
        by list item 'separators'.
      </td>
    </tr>
    <tr>
      <td><code>customScrollV</code></td>
      <td>Custom ScrollView</td>
      <td>
        Creates a <code>ScrollView</code> that creates custom scroll effects
        using slivers. If the <code>primary</code> argument is true, the
        <code>controller</code> must be null.
      </td>
    </tr>
    <tr>
      <td><code>streamBldr</code></td>
      <td>Stream Builder</td>
      <td>
        Creates a new <code>StreamBuilder</code> that builds itself based on the
        latest snapshot of interaction with the specified <code>stream</code>
      </td>
    </tr>
    <tr>
      <td><code>animatedBldr</code></td>
      <td>Animated Builder</td>
      <td>
        Creates an Animated Builder. The widget specified to
        <code>child</code> is passed to the <code>builder</code>
      </td>
    </tr>
    <tr>
      <td><code>statefulBldr</code></td>
      <td>Stateful Builder</td>
      <td>
        Creates a widget that both has state and delegates its build to a
        callback. Useful for rebuilding specific sections of the widget tree.
      </td>
    </tr>
    <tr>
      <td><code>orientationBldr</code></td>
      <td>Orientation Builder</td>
      <td>
        Creates a builder which allows for the orientation of the device to be
        specified and referenced
      </td>
    </tr>
    <tr>
      <td><code>layoutBldr</code></td>
      <td>Layout Builder</td>
      <td>
        Similar to the <code>Builder</code> widget except that the framework
        calls the builder function at layout time and provides the parent
        widget's constraints.
      </td>
    </tr>
    <tr>
      <td><code>singleChildSV</code></td>
      <td>Single Child Scroll View</td>
      <td>Creates a scroll view with a single child</td>
    </tr>
    <tr>
      <td><code>futureBldr</code></td>
      <td>Future Builder</td>
      <td>
        Creates a Future Builder. This builds itself based on the latest
        snapshot of interaction with a Future.
      </td>
    </tr>
    <tr>
      <td><code>nosm</code></td>
      <td>No Such Method</td>
      <td>
        This method is invoked when a non-existent method or property is
        accessed.
      </td>
    </tr>
    <tr>
      <td><code>inheritedW</code></td>
      <td>Inherited Widget</td>
      <td>Class used to propagate information down the widget tree.</td>
    </tr>
    <tr>
      <td><code>mounted</code></td>
      <td>Mounted</td>
      <td>Whether this State object is currently in a tree.</td>
    </tr>
    <tr>
      <td><code>snk</code></td>
      <td>Sink</td>
      <td>A Sink is the input of a stream.</td>
    </tr>
    <tr>
      <td><code>strm</code></td>
      <td>Stream</td>
      <td>
        A source of asynchronous data events. A stream can be of any data type.
      </td>
    </tr>
    <tr>
      <td><code>subj</code></td>
      <td>Subject</td>
      <td>
        A BehaviorSubject is also a broadcast StreamController which returns an
        Observable rather than a Stream.
      </td>
    </tr>
    <tr>
      <td><code>toStr</code></td>
      <td>To String</td>
      <td>Returns a string representation of this object.</td>
    </tr>
    <tr>
      <td><code>debugP</code></td>
      <td>Debug Print</td>
      <td>
        Prints a message to the console, which you can access using the flutter
        tool's <code>logs</code> command (flutter logs).
      </td>
    </tr>
    <tr>
      <td><code>importM</code></td>
      <td>Material Package</td>
      <td>Import Material package.</td>
    </tr>
    <tr>
      <td><code>importC</code></td>
      <td>Cupertino Package</td>
      <td>Import Cupertino package.</td>
    </tr>
    <tr>
      <td><code>importFT</code></td>
      <td>flutter_test Package</td>
      <td>Import flutter_test package.</td>
    </tr>
    <tr>
      <td><code>mateapp</code></td>
      <td>Material App</td>
      <td>Create a new Material App.</td>
    </tr>
    <tr>
      <td><code>cupeapp</code></td>
      <td>Cupertino Package</td>
      <td>Create a New Cupertino App.</td>
    </tr>
    <tr>
      <td><code>tweenAnimationBuilder</code></td>
      <td>Tween Animation Builder</td>
      <td>
        Widget builder that animates a property of a Widget to a target value
        whenever the target value changes.
      </td>
    </tr>
    <tr>
      <td><code>valueListenableBuilder</code></td>
      <td>Value Listenable Builder</td>
      <td>
        Given a ValueListenable and a builder which builds widgets from concrete
        values of T, this class will automatically register itself as a listener
        of the ValueListenable and call the builder with updated values when the
        value changes.
      </td>
    </tr>
    <tr>
      <td><code>f-test</code></td>
      <td>Test</td>
      <td>Create a test function.</td>
    </tr>
    <tr>
      <td><code>widgetTest</code></td>
      <td>Test Widgets</td>
      <td>Create a testWidgets function.</td>
    </tr>
  </tbody>
</table>
